cmake_minimum_required(VERSION 2.8.3)
project(ros_legacy)
find_package(catkin_simple REQUIRED)
catkin_simple(ALL_DEPS_REQUIRED)
set(CMAKE_VERBOSE_MAKEFILE OFF)

#find_package(catkin REQUIRED COMPONENTS cpp_common)
find_package(Boost REQUIRED COMPONENTS date_time system thread regex)
#include_directories(include ${Boost_INCLUDE_DIRS})

# catkin_package(
#   INCLUDE_DIRS include
#   LIBRARIES ${PROJECT_NAME}
# #  CATKIN_DEPENDS cpp_common
#   DEPENDS Boost
# )

# catkin_package(
#   INCLUDE_DIRS include ${LOG4CXX_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS}
#   LIBRARIES rosconsole ${rosconsole_backend_LIBRARIES} ${LOG4CXX_LIBRARIES} ${Boost_LIBRARIES}
#   CATKIN_DEPENDS cpp_common rostime
#   CFG_EXTRAS rosconsole-extras.cmake
# )

#find_package(Log4cxx)
#if(NOT LOG4CXX_LIBRARIES)
# backup plan, hope it is in the system path
find_library(LOG4CXX_LIBRARIES log4cxx)
#endif()

#include(${CATKIN_DEVEL_PREFIX}/share/${PROJECT_NAME}/cmake/rosconsole-extras.cmake)

include_directories(include ${catkin_INCLUDE_DIRS} ${LOG4CXX_INCLUDE_DIRS} ${Boost_INCLUDE_DIRS})

# target_link_libraries(rosconsole ${rosconsole_backend_LIBRARIES} ${catkin_LIBRARIES} ${Boost_LIBRARIES})
# target_link_libraries(rosconsole_log4cxx rosconsole_backend_interface ${LOG4CXX_LIBRARIES} ${Boost_LIBRARIES})

# if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/test/speed_test.cpp")
#   add_executable(rosconsole_speed_test test/speed_test.cpp)
#   target_link_libraries(rosconsole_speed_test rosconsole ${rosconsole_backend_LIBRARIES} ${catkin_LIBRARIES} ${Boost_LIBRARIES})
# endif()

# install(TARGETS rosconsole rosconsole_${ROSCONSOLE_BACKEND} rosconsole_backend_interface
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION})

# install(FILES config/rosconsole.config
#   DESTINATION ${CATKIN_GLOBAL_SHARE_DESTINATION}/ros/config)

install(DIRECTORY include/
  DESTINATION ${CATKIN_GLOBAL_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN "*.h")

cs_add_library(ros_legacy
  # rostime
  src/duration.cpp
  src/rate.cpp
  src/time.cpp
  # rosconcole
  src/rosconsole_backend.cpp
  src/rosconsole.cpp
  src/impl/rosconsole_log4cxx.cpp
  # roslib
  src/package.cpp
)

target_link_libraries(ros_legacy ${LOG4CXX_LIBRARIES} ${Boost_LIBRARIES})
# if(NOT APPLE)
#   target_link_libraries(rostime ${RT_LIBRARY})
# endif()

# install(TARGETS ros_legacy
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION})

#message(CGID ${CATKIN_DEVEL_PREFIX}/include})

# install(DIRECTORY include/
#   DESTINATION ${CATKIN_DEVEL_PREFIX}/include
#   FILES_MATCHING PATTERN "*.h")

catkin_add_gtest(${PROJECT_NAME}-test_time src/test/time.cpp)
if(TARGET ${PROJECT_NAME}-test_time)
  target_link_libraries(${PROJECT_NAME}-test_time ${catkin_LIBRARIES} ros_legacy)
endif()

catkin_add_gtest(${PROJECT_NAME}-utest src/test/utest.cpp)
if(TARGET ${PROJECT_NAME}-utest)
  target_link_libraries(${PROJECT_NAME}-utest ${PROJECT_NAME})
endif()

catkin_add_gtest(${PROJECT_NAME}-assertion_test src/test/assertion_test.cpp)
if(TARGET ${PROJECT_NAME}-assertion_test)
  target_link_libraries(${PROJECT_NAME}-assertion_test ${PROJECT_NAME})
endif()

catkin_add_gtest(${PROJECT_NAME}-thread_test src/test/thread_test.cpp)
if(TARGET ${PROJECT_NAME}-thread_test)
  target_link_libraries(${PROJECT_NAME}-thread_test ${PROJECT_NAME})
endif()

cs_export()

