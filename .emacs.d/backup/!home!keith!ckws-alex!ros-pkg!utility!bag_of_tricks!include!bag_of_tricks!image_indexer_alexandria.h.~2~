// Converts image indices to/from row/column and deals with image rescaling
#pragma once

// #include "ros/assert.h"
// #include "cxcore.h"
#include "bag_of_tricks/depth_calibration.h"

// Alexandria version of image indexer. Instead of a simple mapping between depth and rgb
// pixels like on the Penguin, it uses a mapping function that depends on parameters from
// each individual camera

// An index is just an index into a vector of width*height pixels representig an image

// A blob (foreground object) is represented by a vector of indices making up the object.

// A packed color array contains the tripples of RGB bytes corresonding to a set of
// depth indices representing a foreground object.

class ImageIndexerAlexandria
{
public:
  // Color and depth are just used for image sizes
  ImageIndexerAlexandria(const BagOfTricks::DepthCalibration& dc,
               const cv::Mat color,
               const cv::Mat depth)
    :  dc_(dc),
       color_width_(color.cols), color_height_(color.rows),
       depth_width_(depth.cols), depth_height_(depth.rows),
       width_scale_factor_(ceil(1.0*color_width_/depth_width_)),
       height_scale_factor_(ceil(1.0*color_height_/depth_height_))
    {
    }

  inline int colorPixelsPerDepthPixel() const {
    return width_scale_factor_ * height_scale_factor_;
  }

  // converts a depth index to a color index
  inline int depthIndexToColorIndex(int depth_idx, float depth_value)
  {
    int depth_y = depth_idx / depth_width_;
    int depth_x = depth_idx % depth_width_;
    int color_x, color_y;
    dc_.getRGBPoint(depth_value, depth_x, depth_y, &color_x, &color_y);
    int color_idx = color_y*color_width_ + color_x;
    return color_idx;
  }

  // converts a depth index to a color point
  inline void depthIndexToColorPoint(int depth_idx, float depth_value,
                                     int* color_x, int* color_y)
  {
    int depth_y = depth_idx / depth_width_;
    int depth_x = depth_idx % depth_width_;
    dc_.getRGBPoint(depth_value, depth_x, depth_y, color_x, color_y);
  }

  // converts a color point to a color index
  inline int colorPointToColorIndex(int color_x, int color_y)
  {
    return color_y*color_width_ + color_x;
  }

  // Populate several pixels of a packed array corresponding to one depth pixel, given the
  // depth index and the index of the start of the pixel in the packed array.
  inline void packColorFromMatrix(const cv::Mat3b &color, int depth_index, float depth_value,
                                  std::vector<uint8_t>& packed_color,
                                  int packed_index)
  {
    int color_x, color_y;
    depthIndexToColorPoint(depth_index, depth_value, &color_x, &color_y);
    // TODO: Center color pixels on returned color_x, color_y        

    int dst_start_index = packed_index * colorPixelsPerDepthPixel();
    
    int p_index = packed_index;

    for (int dy = 0; dy < height_scale_factor_; dy++) {
      for (int dx = 0; dx < width_scale_factor_; dx++) {
        int color_idx = colorPointToColorIndex(color_x + dx, color_y + dy);
        packed_color[p_index+0] = color(color_idx)[0];
        packed_color[p_index+1] = color(color_idx)[1];
        packed_color[p_index+2] = color(color_idx)[2];
        p_index += 3;
      }
    }
  }
      

  // Copy packed color pixels into image.
  inline void unpackColorIntoMatrix(const uint8_t *packed_color,
                                    int depth_index,
                                    float depth_value,
                                    cv::Mat3b &color,
                                    int packed_index)
  {
    int color_x, color_y;
    depthIndexToColorPoint(depth_index, depth_value, &color_x, &color_y);
    // TODO: Center color pixels on returned color_x, color_y        

    int dst_start_index = packed_index * colorPixelsPerDepthPixel();
    
    int p_index = packed_index;

    for (int dy = 0; dy < height_scale_factor_; dy++) {
      for (int dx = 0; dx < width_scale_factor_; dx++) {
        int color_idx = colorPointToColorIndex(color_x + dx, color_y + dy);
        color(color_idx)[0] = packed_color[p_index+0]; 
        color(color_idx)[1] = packed_color[p_index+1]; 
        color(color_idx)[2] = packed_color[p_index+2]; 
        p_index += 3;
      }
    }
  }

#if 0
  inline void packColorFromMatrix(const cv::Mat3b &src_mat, int src_start_depth_index,
                                  uint8_t *dst_packed_array,
                                  int dst_depth_array_index)
  {
    ROS_INFO("packColorFromMatrix");
    int src_start_index = scale(src_start_depth_index);
    int dst_start_index = scale_factor_ * scale_factor_ * dst_depth_array_index;
    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int src_idx = (src_start_index + dy * dst_width_ + dx);
        int dst_idx = (dst_start_index + dy * scale_factor_ + dx) * 3;
        dst_packed_array[dst_idx + 0] = src_mat(src_idx)[0];
        dst_packed_array[dst_idx + 1] = src_mat(src_idx)[1];
        dst_packed_array[dst_idx + 2] = src_mat(src_idx)[2];
      }
    }
  }

  inline void packColorFromImage(const uint8_t *src_img, int src_start_depth_index,
                                 uint8_t *dst_packed_array,
                                 int dst_depth_array_index)
  {
    ROS_INFO("packColorFromImage");
    int src_start_index = scale(src_start_depth_index);
    int dst_start_index = scale_factor_ * scale_factor_ * dst_depth_array_index;

    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int src_idx = (src_start_index + dy * dst_width_ + dx) * 3;
        int dst_idx = (dst_start_index + dy * scale_factor_ + dx) * 3;

        dst_packed_array[dst_idx + 2] = src_img[src_idx + 0];
        dst_packed_array[dst_idx + 1] = src_img[src_idx + 1];
        dst_packed_array[dst_idx + 0] = src_img[src_idx + 2];
      }
    }
  }

  inline void unpackColorIntoRGB(const uint8_t *src_packed_array,
                                   int src_depth_array_index,
                                   uint8_t *dst_img,
                                   int dst_start_depth_index)
  {
    ROS_INFO("unpackColorIntoRGB");
    int src_start_index = scale_factor_ * scale_factor_ * src_depth_array_index;
    int dst_start_index = scale(dst_start_depth_index);

    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int src_idx = (src_start_index + dy * scale_factor_ + dx) * 3;
        int dst_idx = (dst_start_index + dy * dst_width_ + dx) * 3;

        dst_img[dst_idx + 0] = src_packed_array[src_idx + 0];
        dst_img[dst_idx + 1] = src_packed_array[src_idx + 1];
        dst_img[dst_idx + 2] = src_packed_array[src_idx + 2];
      }
    }
  }

  inline void unpackColorIntoRGBA(const uint8_t *src_packed_array,
                                   int src_depth_array_index,
                                   uint8_t *dst_img,
                                   int dst_start_depth_index,
                                   uint8_t alpha)
  {
    ROS_INFO("unpackColorIntoRGBA");
    int src_start_index = scale_factor_ * scale_factor_ * src_depth_array_index;
    int dst_start_index = scale(dst_start_depth_index);

    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int src_idx = (src_start_index + dy * scale_factor_ + dx) * 3;
        int dst_idx = (dst_start_index + dy * dst_width_ + dx) * 4;

        dst_img[dst_idx + 0] = src_packed_array[src_idx + 2];
        dst_img[dst_idx + 1] = src_packed_array[src_idx + 1];
        dst_img[dst_idx + 2] = src_packed_array[src_idx + 0];
        dst_img[dst_idx + 3] = alpha;
      }
    }
  }


  inline void copyColorToTexture(const cv::Mat3b &src_mat,
                                 uint8_t *dst_img,
                                 int depth_index,
                                 uint8_t alpha)
  {
    int start_index = scale(depth_index);
    int width = src_mat.cols;

    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int src_idx = (start_index + dy * width + dx);
        int dst_idx = src_idx * 4;

        dst_img[dst_idx + 0] = src_mat(src_idx)[2];
        dst_img[dst_idx + 1] = src_mat(src_idx)[1];
        dst_img[dst_idx + 2] = src_mat(src_idx)[0];
        dst_img[dst_idx + 3] = alpha;
      }
    }
  }

  inline void copyColorToTexture(const cv::Mat3b &src_mat,
                                 uint8_t *dst_img,
                                 int depth_index)
  {
    int start_index = scale(depth_index);
    int width = src_mat.cols;

    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int src_idx = (start_index + dy * width + dx);
        int dst_idx = src_idx * 4;

        dst_img[dst_idx + 0] = src_mat(src_idx)[2];
        dst_img[dst_idx + 1] = src_mat(src_idx)[1];
        dst_img[dst_idx + 2] = src_mat(src_idx)[0];
      }
    }
  }

  inline void copyColorToColor(const cv::Mat3b &src_mat,
                               cv::Mat3b *dst_mat,
                               int depth_index)
  {
    int start_index = scale(depth_index);
    int width = src_mat.cols;

    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int src_idx = (start_index + dy * width + dx);
        (*dst_mat)(src_idx) = src_mat(src_idx);
      }
    }
  }

  inline void copyDepthToTexture(uint8_t r,
                                 uint8_t g,
                                 uint8_t b,
                                 uint8_t *dst_img,
                                 int depth_index,
                                 uint8_t alpha)
  {
    int start_index = scale(depth_index);

    for (int dy = 0; dy < scale_factor_; dy++) {
      for (int dx = 0; dx < scale_factor_; dx++) {
        int dst_idx = (start_index + dy * dst_width_ + dx) * 4;

        dst_img[dst_idx + 0] = b;
        dst_img[dst_idx + 1] = g;
        dst_img[dst_idx + 2] = r;
        dst_img[dst_idx + 3] = alpha;
      }
    }
  }
#endif
  
private:
  // Maps depth to RGB pixels
  BagOfTricks::DepthCalibration dc_;
  // Size of color frame
  int color_width_, color_height_;
  // Size of depth frame
  int depth_width_, depth_height_;
  // scaling factor from depth to color
  int width_scale_factor_;
  int height_scale_factor_;
};
