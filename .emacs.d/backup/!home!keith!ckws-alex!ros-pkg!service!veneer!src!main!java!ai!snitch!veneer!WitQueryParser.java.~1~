package ai.snitch.veneer;

import java.io.IOException;
<<<<<<< HEAD
import java.time.Duration;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAmount;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import javax.annotation.Nullable;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.base.Strings;
import com.google.common.collect.FluentIterable;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
=======
import java.time.Instant;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.google.common.collect.ImmutableMap;
>>>>>>> Merge master into feature/jarvis2-alexandria
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<<<<<<< HEAD
import ai.snitch.domain.Sensor;
=======
>>>>>>> Merge master into feature/jarvis2-alexandria
import ai.snitch.domain.Site;
import ai.snitch.protocol.history.HistoryRequest;
import ai.snitch.util.Arguments;
import ai.snitch.util.http.MediaTypes;
import ai.snitch.util.io.RuntimeIOException;
<<<<<<< HEAD
import ai.snitch.util.time.HalfDay;
import ai.snitch.veneer.rpc.HistoryEndpoint;
import ai.snitch.veneer.rpc.Mappings;
=======
import ai.snitch.veneer.rpc.HistoryEndpoint;
>>>>>>> Merge master into feature/jarvis2-alexandria

public class WitQueryParser implements HistoryEndpoint.NaturalQueryParser {

  private static final Logger log = LoggerFactory.getLogger(WitQueryParser.class);

  protected static final HttpUrl ENDPOINT = HttpUrl.parse("https://api.wit.ai/message?v=20160526");

<<<<<<< HEAD
  protected static final Map<String, String> OBJECT_CLASS_TO_LABEL = ImmutableMap.of(
      "anything",         ANY_LABEL,
      "smart timelapse",  STORY_LABEL,
      "dog",              "pet",
      "person",           "alert");

=======
>>>>>>> Merge master into feature/jarvis2-alexandria

  private final ObjectMapper jackson = new ObjectMapper();

  private final OkHttpClient http = new OkHttpClient.Builder()
      .followRedirects(false)
      .followSslRedirects(false)
<<<<<<< HEAD
      .connectTimeout(8, TimeUnit.SECONDS)
=======
      .connectTimeout(5, TimeUnit.SECONDS)
>>>>>>> Merge master into feature/jarvis2-alexandria
      .build();

  private final String apiToken;


  public WitQueryParser(String secret) {
    this.apiToken = Arguments.requireNonEmpty(secret);
  }

  @Override
<<<<<<< HEAD
  public HistoryRequest parse(String query, Site site, Instant now) {
    try {
      log.debug("Parse query [{}] for {}", query, site);
      ZonedDateTime reference = now.atZone(site.getTimeZone());
      ObjectNode context = context(site, reference);
      ObjectNode response = comprehend(query, context);
      try {
        HistoryRequest result = transform(site, reference, response);
        if (log.isTraceEnabled()) log.trace("Processed query [{}]\ncontext  {}\nresponse {}\nresult   {}", query, context, response, result);
        return result;
      } catch (RuntimeException e) {
        log.error("Failed to transform Wit.ai response for [{}]\ncontext  {}\nresponse {}", query, context, response, e);
        return null;
      }
    } catch (IOException e) {
      throw new RuntimeIOException(e);
    }
  }

  protected ObjectNode comprehend(String query, Site site, Instant now) throws IOException {
    return comprehend(query, context(site, now.atZone(site.getTimeZone())));
  }

  protected ObjectNode comprehend(String query, ObjectNode context) throws IOException {
    Response response = http.newCall(new Request.Builder()
        .header("Authorization", "Bearer " + apiToken)
        .url(ENDPOINT.newBuilder()
            .addQueryParameter("q", Arguments.requireNonEmpty(query))
            .addQueryParameter("context", jackson.writeValueAsString(context))
            .build())
        .build()).execute();
    if (response.code() != 200) throw new IOException("Wit.ai request failed: " + response.code() + " " + response.body().string());
    MediaTypes.checkType(MediaTypes.JSON, response.body().contentType());
    return jackson.readValue(response.body().byteStream(), ObjectNode.class);
  }

  protected ObjectNode context(Site site, ZonedDateTime now) {
    // See https://wit.ai/docs/http/20160526#context-link
    ObjectNode context = jackson.createObjectNode();

    // Pass the reference time and zone. Note that if `reference_time` contains an
    // offset or 'Z' it takes precedence over `timezone`, which is undesirable because
    // it causes processing on the Wit.ai side to disregard DST.
    context.put("reference_time", now.toLocalDateTime().toString());
    context.put("timezone", now.getZone().getId());

    // Pass all sensor names as possible values for the camera_name entity
    context.putArray("entities")
        .addObject()
        .put("id", "camera_name")
        .putArray("values").addAll(Lists.transform(site.getSensors(), (s) -> {
          String name = s.getName();
          ObjectNode value = jackson.createObjectNode().put("value", name);
          value.putArray("expressions").add(name);
          return value;
        }));
    return context;
  }

  protected HistoryRequest transform(Site site, ZonedDateTime now, ObjectNode response) {
=======
  public HistoryRequest parse(Site site, Instant now, String query) {
    ObjectNode response = comprehend(site, now, query);
    try {
      HistoryRequest result = transform(site, response);
      log.debug("Transformed [{}] -> {}", query, result);
      return result;
    } catch (RuntimeException e) {
      log.error("Failed to transform Wit.ai response for [{}]\n{}", query, response, e);
      return null;
    }
  }

  protected ObjectNode comprehend(Site site, Instant now, String query) {
    return execute(new Request.Builder()
        .header("Authorization", "Bearer " + apiToken)
        .url(ENDPOINT.newBuilder()
            .addQueryParameter("q", Arguments.requireNonEmpty(query))
            .build())
        .build());
  }

  protected ObjectNode execute(Request request) {
    try {
      Response response = http.newCall(request).execute();
      if (response.code() != 200) throw new IOException("Wit.ai request failed: " + response.code() + " " + response.body().string());
      MediaTypes.checkType(MediaTypes.JSON, response.body().contentType());
      return jackson.readValue(response.body().byteStream(), ObjectNode.class);
    } catch (IOException e) {
      throw new RuntimeIOException(e);
    }
  }

  protected HistoryRequest transform(Site site, ObjectNode response) {
>>>>>>> Merge master into feature/jarvis2-alexandria
    ObjectNode entities = (ObjectNode) response.path("entities");
    if (entities.size() == 0) return null; // nothing was recognized

    HistoryRequest.Builder result = newQuery();
    for (Iterator<Entry<String, JsonNode>> i=entities.fields(); i.hasNext(); /**/) {
      Entry<String, JsonNode> entry = i.next();
<<<<<<< HEAD
      JsonNode details = entry.getValue();
      switch (entry.getKey()) {
        case "intent": applyIntent(result, details); break;
        case "object_class": applyObjectClass(result, details); break;
        case "camera_name": applyCameraName(result, details, site); break;
        case "datetime": applyDateTime(result, details, now); break;
=======
      ArrayNode details = (ArrayNode) entry.getValue();
      switch (entry.getKey()) {
        case "intent": applyIntent(result, details); break;
        case "object_class": applyObjectClass(result, details); break;
        case "datetime": applyDateTime(result, details); break;
>>>>>>> Merge master into feature/jarvis2-alexandria
        default: throw new IllegalArgumentException("unhandled entity type '" + entry.getKey() + "'");
      }
    }
    return result.build();
  }

<<<<<<< HEAD
  protected void applyIntent(HistoryRequest.Builder result, JsonNode details) {
    String intent = singular("intent", details).path("value").textValue();
    if (!"object_class_query".equals(intent)) throw new IllegalArgumentException("unhandled intent '" + intent + "'");
  }

  protected void applyObjectClass(HistoryRequest.Builder result, JsonNode details) {
    for (Iterator<JsonNode> i=details.elements(); i.hasNext(); /**/) {
      String value = value("object_class", i.next());
      String label = OBJECT_CLASS_TO_LABEL.get(value);
      if (label == null) throw new IllegalArgumentException("unhandled object_class '" + value + "'");
      result.label.add(label);
    }
  }

  protected void applyCameraName(HistoryRequest.Builder result, JsonNode details, Site site) {
    String value = singularValue("camera_name", details);
    Sensor sensor = Iterables.find(site.getSensors(), (s) -> s.getName().equals(value), null);
    if (sensor == null) throw new IllegalArgumentException("invalid camera_name '" + value + "'");
    result.sensor_id(Mappings.id(sensor.getId()));
  }

  protected void applyDateTime(HistoryRequest.Builder result, JsonNode details, ZonedDateTime now) {
    JsonNode when = singular("datetime", details);
    String type = Strings.nullToEmpty(when.path("type").textValue());
    switch (type) {
      case "value": applyDateTimeInstant(result, when, now); break;
      case "interval": applyDateTimeInterval(result, when, now); break;
      default: throw new IllegalArgumentException("invalid datetime type '" + type + "'");
    }
  }

  protected void applyDateTimeInstant(HistoryRequest.Builder result, JsonNode when, ZonedDateTime now) {
    // DateTime values are fairly straight-forward, apart from the need to shift future values into
    // the past: For ambiguous expressions like 'at 9' Wit.ai returns the next matching time in the
    // future, but we're interested in the most recent matching time in the past.
    ZonedDateTime value = datetime(when, now.getZone());
    if (value.isAfter(now)) {
      TemporalAmount shift = ambiguity(when, null, now.getZone());
      if (shift != null) {
        ZonedDateTime candidate = value.minus(shift);
        if (!candidate.isAfter(now)) value = candidate;
      }
    }

    // For grains that specify time of day (hour/minute/second) we apply some slack to the specified time,
    // e.g. 'at 9' really means between 8.30 and 9.30. For date-like grains (day/week/month) we use the
    // exact start and end points of the grain instead.
    DateTimeGrain grain = grain(when);
    Instant instant = value.toInstant();
    if (grain.timelike) {
      result.when_from = instant.minus(grain.slack).toEpochMilli();
      result.when_until = instant.plus(grain.slack).toEpochMilli();
    } else {
      result.when_from = instant.toEpochMilli();
      result.when_until = value.plus(grain.period).toInstant().toEpochMilli();
    }
  }

  protected void applyDateTimeInterval(HistoryRequest.Builder result, JsonNode when, ZonedDateTime now) {
    ZonedDateTime from = datetime(when.path("from"), now.getZone());
    ZonedDateTime to = datetime(when.path("to"), now.getZone());

    // Apply ambiguity shift for future dates just like for a datetime instant. Note that the decision
    // to shift and the unit is based purely on the 'from' timestamp; it's OK to query for an interval
    // that extends past the current time (e.g. the current calendar day).
    if (from.isAfter(now)) {
      TemporalAmount shift = ambiguity(when, "from", now.getZone());
      if (shift != null) {
        ZonedDateTime candidate = from.minus(shift);
        if (!candidate.isAfter(now)) {
          from = candidate;
          to = to.minus(shift);
        }
      }
    }

    // DateTime intervals are returned in a somewhat quirky way where the 'to' value is returned
    // shifted forwards by the grain, e.g. for '7am to 8am' the 'to' timestamp is 9am with grain='hour'.
    // However things get really buggy when the two ends of the interval have different grain:
    // 'between 8.15 am and 9' returns grain='minute' but the 'to' value is shifted by an hour.
    // Note that for date-like grains the shifting is actually desirable: 'between Monday and Wednesday'
    // returns and interval that covers all of Monday, Tuesday, and Wednesday.
    DateTimeGrain grain = grain(when.path("to"));
    result.when_from = from.toInstant().toEpochMilli();
    result.when_until = (grain.timelike ? to.minus(grain.period) : to).toInstant().toEpochMilli();
  }

  protected static List<TemporalAmount> AMBIGUITY_UNITS = ImmutableList.of(
      HalfDay.INSTANCE,             // ambiguous AM/PM, e.g. "at 7"
      DateTimeGrain.DAY.period,     // ambiguous day, e.g. "at 7am"
      DateTimeGrain.WEEK.period,    // ambiguous week, e.g. "on Monday"
      DateTimeGrain.MONTH.period);  // ambiguous month, e.g. "on the 18th"

  protected static @Nullable TemporalAmount ambiguity(JsonNode when, @Nullable String nested, ZoneId zone) {
    // Work out unit of ambiguity by determining the stride between the alternate possible values.
    // If there aren't at least 2 alternate values, or the stride doesn't match any expected size,
    // null is returned. The stride is validated against the entire set of alternate values. Note
    // that the ambiguity unit is unrelated to the grain with which the values themselves are specified.
    JsonNode values = when.path("values");
    if (!values.isArray() || values.size() < 2) return null;

    Iterator<JsonNode> i=values.iterator();
    ZonedDateTime prev = datetime(i.next(), nested, zone);
    ZonedDateTime next = datetime(i.next(), nested, zone);

    for (TemporalAmount unit : AMBIGUITY_UNITS) {
      if (!prev.plus(unit).equals(next)) continue;

      while (i.hasNext()) { // validate remaining alternates
        prev = next; next = datetime(i.next(), nested, zone);
        if (!prev.plus(unit).equals(next)) return null; // no other unit will match either
      }
      return unit;
    }

    return null;
  }

  protected static JsonNode singular(String what, JsonNode array) {
    if (array.isArray() && array.size() == 1) return array.get(0);
    throw new IllegalArgumentException(what + " must be singular");
  }

  protected static String value(String what, JsonNode object) {
    if (object.isObject() && "value".equals(object.path("type").textValue())) {
      String value = object.path("value").textValue();
      if (!Strings.isNullOrEmpty(value)) return value;
    }
    throw new IllegalArgumentException(what + " must be a value");
  }

  protected static String singularValue(String what, JsonNode array) {
    return value(what, singular(what, array));
  }

  protected static ZonedDateTime datetime(JsonNode object, ZoneId zone) {
    String value = Strings.nullToEmpty(object.path("value").textValue());
    try {
      return OffsetDateTime.parse(value).atZoneSameInstant(zone);
    } catch (DateTimeParseException e) {
      throw new IllegalArgumentException("invalid datetime '" + value + "'", e);
    }
  }

  protected static ZonedDateTime datetime(JsonNode object, @Nullable String nested, ZoneId zone) {
    return datetime((nested != null) ? object.path(nested) : object, zone);
  }

  protected static DateTimeGrain grain(JsonNode object) {
    return DateTimeGrain.of(object.path("grain").textValue());
=======
  protected void applyIntent(HistoryRequest.Builder result, ArrayNode details) {
    Arguments.require(details.size() == 1, "intent must be singular");
    String intent = details.get(0).path("value").textValue();
    if (!"object_class_query".equals(intent)) throw new IllegalArgumentException("unhandled intent '" + intent + "'");
  }

  protected void applyObjectClass(HistoryRequest.Builder result, ArrayNode details) {
    for (Iterator<JsonNode> i=details.elements(); i.hasNext(); /**/) {
      ObjectNode entry = (ObjectNode) i.next();
      Arguments.require("value".equals(entry.path("type").textValue()), "object_class must be a value");
      String value = Arguments.requireNonEmpty(entry.path("value").textValue());
      String label = OBJECT_CLASS_TO_LABEL.get(value);
      if (label == null) throw new IllegalArgumentException("unhandled object_class '" + value + "'");
      if (!ANY_LABEL.equals(label)) result.label.add(label);
    }
  }

  protected void applyDateTime(HistoryRequest.Builder result, ArrayNode details) {
    // TODO
>>>>>>> Merge master into feature/jarvis2-alexandria
  }

  protected static HistoryRequest.Builder newQuery() {
    return new HistoryRequest.Builder().site_id("<not mapped>");
  }

<<<<<<< HEAD

  protected static enum DateTimeGrain {

    SECOND(Duration.ofSeconds(1), Duration.ofSeconds(30)),
    MINUTE(Duration.ofMinutes(1), Duration.ofMinutes(10)),
    HOUR(Duration.ofHours(1), Duration.ofMinutes(30)),
    DAY(Period.ofDays(1)),
    WEEK(Period.ofDays(7)),
    MONTH(Period.ofMonths(1));

    public final TemporalAmount period;
    public final Duration slack;
    public final boolean timelike;

    private DateTimeGrain(TemporalAmount period) {
      this(period, null);
    }

    private DateTimeGrain(TemporalAmount period, Duration slack) {
      this.period = period;
      this.slack = slack;
      this.timelike = (slack != null);
    }

    private static final ImmutableMap<String, DateTimeGrain> VALUES = FluentIterable.of(values()).uniqueIndex((g) -> g.name().toLowerCase(Locale.ROOT));

    public static DateTimeGrain of(String name) {
      DateTimeGrain grain = VALUES.get(name);
      if (grain == null) throw new IllegalArgumentException("invalid datetime grain '" + name + "'");
      return grain;
    }
  }
=======
  private static final String ANY_LABEL = "*";
  private static final Map<String, String> OBJECT_CLASS_TO_LABEL = ImmutableMap.of(
      "anything",         ANY_LABEL,
      "smart timelapse",  "story",
      "dog",              "largepet",
      "person",           "alert");
>>>>>>> Merge master into feature/jarvis2-alexandria
}
